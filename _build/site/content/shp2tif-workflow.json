{"version":2,"kind":"Notebook","sha256":"3886337c7ae7976c812728c735fe26f95748d8df872517952c9177b5bbfae3e3","slug":"shp2tif-workflow","location":"/geocode/shp2tif_workflow.ipynb","dependencies":[],"frontmatter":{"title":"Shapefile ➜ Float32 GeoTIFF (DEPTH2D) — Interactive + Batch","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"numbering":{"title":{"offset":1}},"exports":[{"format":"ipynb","filename":"shp2tif_workflow.ipynb","url":"/shp2tif_workflow-fbae3d2524519c9bf358bb08f2882044.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"This notebook ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"fIHk0m0zUn"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"batch‑converts every ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"YDd2JfWgss"},{"type":"inlineCode","value":".shp","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"I352KJY82W"},{"type":"text","value":" file beneath a chosen root directory into GeoTIFF rasters","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"oxoXy4q7Hv"}],"key":"GJR0Pd7CjO"},{"type":"text","value":" while:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"UfarHuNCfT"}],"key":"ju8RuUW0JV"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"repairing invalid geometries to avoid artefacts (e.g., stray horizontal lines);","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"JvAYhX1mc9"}],"key":"qVYxPc6C5y"}],"key":"AoCHY6joBa"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"ensuring the output raster is ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"I1oRSHrzRP"},{"type":"strong","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"≤ 4096 × 4096","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"fJIKHZGFfT"}],"key":"T5FIMhFBv5"},{"type":"text","value":" pixels (adjusting pixel size if necessary; default target ≈ ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"iW7gMV2996"},{"type":"inlineCode","value":"0.00001","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"eCbxzu3IWl"},{"type":"text","value":" degree);","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"ZdVrHxrdVz"}],"key":"XeweULCEJL"}],"key":"Nf55rATl7F"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"saving each GeoTIFF inside a sibling ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"CE4VvzOdkV"},{"type":"inlineCode","value":"tif/","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"zvWPdTNBIz"},{"type":"text","value":" folder alongside its source shapefile;","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"zTQb1a6TUU"}],"key":"vTCckUIMuD"}],"key":"orN33Ouuja"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"writing a quick‑look ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"id7VrS4oTE"},{"type":"emphasis","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"PNG","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"By3YpbHAyo"}],"key":"JutoyrlSpj"},{"type":"text","value":" overlay (shapefile boundary + raster) for visual QA.","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"hP2EjKCzej"}],"key":"FC0eWDZTmD"}],"key":"KO7gSV5jx2"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"paragraph","children":[{"type":"strong","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Interactive single‑file test","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"UNn3cD5xjD"}],"key":"ZLDxgi2N6U"},{"type":"text","value":" – preview one ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"PebFKDs6Q7"},{"type":"inlineCode","value":".shp","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"bjIJfU2tGy"},{"type":"text","value":" as a raster overlay without saving.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"UeUlkvLil2"}],"key":"Jnm4OuugYb"}],"key":"Ft4TjWUEYb"},{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"paragraph","children":[{"type":"strong","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Batch conversion","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"LnCTWaeDiM"}],"key":"bodswKI7pk"},{"type":"text","value":" – scan timestamp‑named folders, convert each contained shapefile to 32‑bit float GeoTIFF (","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"Z4eNo6o5FJ"},{"type":"inlineCode","value":"DEPTH2D","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"I9eZENUYTT"},{"type":"text","value":" band) named ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"LdzPl1Vru3"},{"type":"inlineCode","value":"<timestamp>_<frame>.tif","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"MmkTNw1eqk"},{"type":"text","value":".","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"O4McgYz50q"}],"key":"qFHmp9p2Rj"}],"key":"bd7NNUc1lM"}],"key":"x7AXg6jLOy"},{"type":"blockquote","position":{"start":{"line":12,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"strong","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Dependencies","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"G7YLLmTrEq"}],"key":"TqZ5MWA2yB"}],"key":"XLvdsqz2n2"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":13,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"GeoPandas ≥ 0.14","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"tlEVBTI1rM"}],"key":"cGsQt2cF4o"}],"key":"xrdnQiV0bb"},{"type":"listItem","spread":true,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Shapely ≥ 2.0","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"qz0dWCkGmQ"}],"key":"ej4SDT2mK0"}],"key":"MEJRHJ67Rg"},{"type":"listItem","spread":true,"position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Rasterio ≥ 1.3","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"gXfE1Sz6hN"}],"key":"tOVhVoah1L"}],"key":"kDH1AWE0ps"},{"type":"listItem","spread":true,"position":{"start":{"line":16,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Matplotlib","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"I9fnCtLSXq"}],"key":"LBalBbwZoQ"}],"key":"qpps60ZxS1"}],"key":"Mj3CB5V8kd"},{"type":"paragraph","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"Install (conda):","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"nnedP6Wl5M"}],"key":"xuYYmLVMtx"},{"type":"code","lang":"bash","value":"conda create -n gis python=3.11 geopandas rasterio matplotlib -c conda-forge\nconda activate gis","position":{"start":{"line":19,"column":1},"end":{"line":22,"column":1}},"key":"wbj9UjZcyP"}],"key":"x3yh2RKbK0"},{"type":"paragraph","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"text","value":"All outputs limited to ≤ 4096×4096 pixels; overlapping polygons merged with ","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"cHAPgZiuS4"},{"type":"emphasis","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"text","value":"max","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"tag3wBtzMS"}],"key":"W5jnSue4hu"},{"type":"text","value":" DEPTH2D; ","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"D8PnyZEDGD"},{"type":"inlineCode","value":"nodata=-9999","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"CpsPjdhwhm"},{"type":"text","value":".","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"zsFydS5gKj"}],"key":"Cr3yQ6ABxK"}],"key":"fyYBKEWKd1"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import warnings, math\nfrom pathlib import Path\nimport geopandas as gpd\nfrom shapely import make_valid\nimport rasterio\nfrom rasterio.transform import from_origin\nfrom rasterio.features import rasterize\nfrom rasterio.enums import MergeAlg\nimport matplotlib.pyplot as plt\n","key":"Cy44fY2OaU"},{"type":"output","id":"NffshQrbVJhW0ShqBUqsZ","data":[],"key":"DJu3F1gdGm"}],"key":"yIp5SaXihQ"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Configure I/O Paths","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZvtX421dzP"}],"identifier":"configure-i-o-paths","label":"Configure I/O Paths","html_id":"configure-i-o-paths","implicit":true,"key":"NyaeI46W5D"}],"key":"JJbtMnaba6"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# SINGLE TEST\ntest_shp = Path(r'D:/gis/single_test/one.shp')   # change\n\n# BATCH\nbatch_root   = Path(r'D:/gis/batch_root')        # each sub‑folder = timestamp\nbatch_output = Path(r'D:/gis/tif_output')\nbatch_output.mkdir(parents=True, exist_ok=True)\n\nprint('Batch root :', batch_root.resolve())\nprint('Output root:', batch_output.resolve())\n","key":"Reb1RMrs4P"},{"type":"output","id":"VieEc3X-_OvdiWn3avNUY","data":[],"key":"ViaHT79nhY"}],"key":"JH7WMW1qnT"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Parameters","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VhDyEfHkFC"}],"identifier":"parameters","label":"Parameters","html_id":"parameters","implicit":true,"key":"CFtNb3T05g"}],"key":"zIrRkMVoeA"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"PIXEL_LIMIT     = 4096\nPIXEL_SIZE_FINE = 1e-5    # deg pls defined by yourself\nNODATA          = -9999.0\n#MERGE_STRATEGY  = 'max'   # max/min/first\nFRAME_FIELD     = 'FRAME' # attribute for frame number\n","key":"zBPusV6KnG"},{"type":"output","id":"EAxPlITCNBknbPXXm0esd","data":[],"key":"cMKAOBWtfe"}],"key":"nC47Zl9BJK"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Utilities","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"yDFUfEFIJ3"}],"identifier":"utilities","label":"Utilities","html_id":"utilities","implicit":true,"key":"BMNgudIwtc"}],"key":"mjnYqTTOp7"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def repair(gdf):\n    def _f(geom):\n        if geom is None or geom.is_empty:\n            return None\n        if not geom.is_valid:\n            try:\n                return make_valid(geom)\n            except Exception:\n                return geom.buffer(0)\n        return geom\n    gdf['geometry'] = gdf.geometry.apply(_f)\n    return gdf[~gdf.geometry.is_empty & gdf.geometry.notnull()]\n\ndef choose_px(bounds):\n    minx, miny, maxx, maxy = bounds\n    dx, dy = maxx - minx, maxy - miny\n    if dx/PIXEL_SIZE_FINE <= PIXEL_LIMIT and dy/PIXEL_SIZE_FINE <= PIXEL_LIMIT:\n        return PIXEL_SIZE_FINE\n    px = max(dx, dy)/PIXEL_LIMIT\n    if px > PIXEL_SIZE_FINE:\n        warnings.warn(f'Pixel size relaxed to {px:.6f}')\n    return px\n\ndef rasterize_depth(gdf):\n    minx, miny, maxx, maxy = gdf.total_bounds\n    px = choose_px((minx, miny, maxx, maxy))\n    width  = math.ceil((maxx - minx)/px)\n    height = math.ceil((maxy - miny)/px)\n    transform = from_origin(minx, maxy, px, px)\n\n    shapes = ((row.geometry, float(row['DEPTH2D'])) for _, row in gdf.iterrows())\n    arr = rasterize(shapes, out_shape=(height, width),\n                    fill=NODATA, dtype='float32',\n                    transform=transform)\n    return arr, transform\n","key":"kPzRr5lMN1"},{"type":"output","id":"K26zHdMe0I-tEX4Trn5-A","data":[],"key":"QexwV3jNcS"}],"key":"xXKSuGatIS"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"1  Interactive Preview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fveol1MS44"}],"identifier":"id-1-interactive-preview","label":"1  Interactive Preview","html_id":"id-1-interactive-preview","implicit":true,"key":"NyBQQKnpSV"}],"key":"vL8JARWrvr"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"if test_shp.exists():\n    gdf = gpd.read_file(test_shp)\n    if 'DEPTH2D' not in gdf.columns:\n        raise KeyError('DEPTH2D missing')\n    gdf = repair(gdf)\n    arr, transform = rasterize_depth(gdf)\n\n    minx, miny, maxx, maxy = gdf.total_bounds\n    fig, ax = plt.subplots(figsize=(6,6))\n    im = ax.imshow(arr, extent=[minx,maxx,miny,maxy], origin='upper', cmap='viridis', alpha=0.6)\n    gdf.boundary.plot(ax=ax, edgecolor='white', linewidth=0.4)\n    plt.colorbar(im, ax=ax, fraction=0.022, pad=0.01, label='DEPTH2D')\n    ax.set_axis_off()\n    plt.show()\nelse:\n    print('Set `test_shp` path to an existing shapefile for preview.')\n","key":"BPwRF55EPF"},{"type":"output","id":"jAv7-3lhv5tMYwM3b8aRu","data":[],"key":"PJN7al0k8R"}],"key":"t60f3ortPO"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"2  Batch Conversion","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Z1SSE4GC0t"}],"identifier":"id-2-batch-conversion","label":"2  Batch Conversion","html_id":"id-2-batch-conversion","implicit":true,"key":"a6IGcp2aML"}],"key":"pcPWrlV1D6"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"folders = [p for p in batch_root.iterdir() if p.is_dir()]\nprint(f'Folders found: {len(folders)}')\n\nfor ts_dir in folders:\n    timestamp = ts_dir.name\n    shp_paths = list(ts_dir.glob('*.shp'))\n    if not shp_paths:\n        print(f'[SKIP] {timestamp}: no shp')\n        continue\n    shp_path = shp_paths[0]\n\n    try:\n        gdf = gpd.read_file(shp_path)\n        if 'DEPTH2D' not in gdf.columns:\n            print(f'[SKIP] {shp_path.name}: DEPTH2D missing')\n            continue\n        gdf = repair(gdf)\n        frame_val = (str(gdf[FRAME_FIELD].dropna().iloc[0])\n                     if FRAME_FIELD in gdf.columns and not gdf[FRAME_FIELD].dropna().empty\n                     else shp_path.stem)\n        arr, transform = rasterize_depth(gdf)\n        out_tif = batch_output / f'{timestamp}_{frame_val}.tif'\n\n        meta = dict(driver='GTiff',\n                    height=arr.shape[0], width=arr.shape[1],\n                    count=1, dtype='float32', transform=transform,\n                    crs=gdf.crs, nodata=NODATA)\n\n        with rasterio.open(out_tif, 'w', **meta) as dst:\n            dst.write(arr, 1)\n\n        print(f'[OK] {timestamp}/{shp_path.name} → {out_tif.name}')\n    except Exception as e:\n        print(f'[ERR] {shp_path}: {e}')\n","key":"TgNxZirnqL"},{"type":"output","id":"GKV5wSmBCIVVcQL9M2XJ6","data":[],"key":"HzkspzaaBD"}],"key":"XNBJEZWeAD"}],"key":"ALJUOrgHz0"},"references":{"cite":{"order":[],"data":{}}}}