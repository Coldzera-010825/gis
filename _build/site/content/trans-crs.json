{"version":2,"kind":"Notebook","sha256":"a2bc6f80c9a92878ec537759037f8968df2b4a7faadff1bc2a65b66ec6abe306","slug":"trans-crs","location":"/geocode/trans_CRS.ipynb","dependencies":[],"frontmatter":{"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"numbering":{"title":{"offset":1}},"exports":[{"format":"ipynb","filename":"trans_CRS.ipynb","url":"/trans_CRS-5ba685db77b72c8c831f690d82716457.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# ─── ① imports ─────────────────────────────────────────────\nimport geopandas as gpd\nfrom pathlib import Path\nimport shutil, os","key":"R84uiaV64E"},{"type":"output","id":"XZ_-bZ6YWnkuIWFW36p-A","data":[],"key":"A7GIcIYtd2"}],"key":"gJM00lv0li"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# ─── ② 参数配置 ────────────────────────────────────────────\ninput_root  = Path(r'D:/gis/to_transform')     # 待转换文件根目录\noutput_root = Path(r'D:/gis/transformed')      # 输出根目录\noutput_root.mkdir(parents=True, exist_ok=True)\n\ntarget_crs = 'EPSG:4326'          # 目标：WGS-84\nassumed_source_crs = None         # 如果数据本身没 CRS，请在这里填如 'EPSG:4547' 等","key":"qhT3DELDev"},{"type":"output","id":"SqeAESXOywcxVxtTv-c57","data":[],"key":"eFXEFTDQP2"}],"key":"Th92nCTdcq"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# ─── ③ 核心函数 ────────────────────────────────────────────\ndef transform_vector(in_path: Path):\n    \"\"\"Read vector file, re-project to `target_crs`, write to mirror location.\"\"\"\n    try:\n        gdf = gpd.read_file(in_path)\n    except Exception as e:\n        print(f'[ERR] {in_path.name}: {e}')\n        return\n    \n    if gdf.crs is None:\n        if not assumed_source_crs:\n            print(f'[SKIP] {in_path.name}: no CRS & no assumed_source_crs.')\n            return\n        gdf = gdf.set_crs(assumed_source_crs)\n    \n    if str(gdf.crs).upper() == str(target_crs).upper():\n        print(f'[=] {in_path.name}: already in {target_crs}')\n        return\n    \n    gdf_out = gdf.to_crs(target_crs)\n    rel     = in_path.relative_to(input_root)\n    out_path = (output_root / rel).with_suffix('.shp')  # 始终写 Shapefile\n    out_path.parent.mkdir(parents=True, exist_ok=True)\n    gdf_out.to_file(out_path)\n    print(f'[OK] {in_path} → {out_path}')","key":"NRtnRViQla"},{"type":"output","id":"MEwbI4O8nnN40a1XiLl9P","data":[],"key":"Gx4OB93gai"}],"key":"MmMlQomltN"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# ─── ④ 批处理执行 ──────────────────────────────────────────\nvector_exts = {'.shp', '.geojson', '.json', '.gpkg'}\nfiles = [p for p in input_root.rglob('*') if p.suffix.lower() in vector_exts]\n\nprint(f'Total vector files: {len(files)}')\nfor vec in files:\n    transform_vector(vec)","key":"Br2GK0YWkS"},{"type":"output","id":"ocPn_DKg2EtjrWoAAq-5h","data":[],"key":"pkkmujNaVh"}],"key":"WgbMszllIi"}],"key":"cjCdJJzEXA"},"references":{"cite":{"order":[],"data":{}}}}